{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>\u26a0\ufe0f PREVIEW VERSION </p> <p>This SDK is currently in preview. Features and APIs may change in future releases.  Use in production environments at your own discretion.</p>"},{"location":"#cibpay-net-sdk","title":"CibPay .NET SDK","text":"<p>A comprehensive .NET library for integrating with CibPay\u2019s payment processing API. This official SDK provides a simple, secure, and efficient way to implement payment functionality in your .NET applications, specifically designed for the Azerbaijani local banking system.</p> <p>\u2b50 We appreciate your star, it helps! </p> <p></p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd12 Secure Authentication - Certificate-based authentication with basic auth support</li> <li>\ud83d\udcb3 Order Management - Create and retrieve payment orders with comprehensive status tracking</li> <li>\ud83c\udfd7\ufe0f Easy Integration - Simple client setup with dependency injection support</li> <li>\u26a1 Async/Await Support - Modern async programming patterns throughout</li> <li>\ud83d\udee1\ufe0f Type Safety - Strongly-typed models and comprehensive error handling</li> <li>\ud83d\udcf1 Multi-Platform - Compatible with console apps, ASP.NET Core, and other .NET platforms</li> </ul>"},{"location":"#quick-installation","title":"Quick Installation","text":"<pre><code>dotnet add package CibPay.Sdk\n</code></pre>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>using CibPay.Http.Configuration;\nusing CibPay.Sdk;\nusing CibPaySdk.Core.Models;\n\n// Configure the SDK\nvar options = new SdkOptions\n{\n    Username = \"your-username\",\n    Password = \"your-password\", \n    BaseUrl = \"https://api-preprod.cibpay.co\",\n    CertificatePath = \"Certificate/api-cibpay.p12\",\n    CertificatePassword = \"your-cert-password\",\n    ReturnUrl = \"https://yoursite.com/payment/return\"\n};\n\n// Create client\nvar client = CibPayClientFactory.Create(options);\n\n// Create an order\nvar order = await client.Orders.CreateAsync(new CreateOrderRequest \n{ \n    Amount = 100.50m \n});\n\nConsole.WriteLine($\"Order created: {order.Data.Id}\");\n</code></pre>"},{"location":"#documentation-navigation","title":"Documentation Navigation","text":""},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ul> <li>Installation - Package installation and prerequisites</li> <li>Quick Start - Step-by-step tutorial for your first payment</li> <li>Configuration - Complete configuration guide</li> </ul>"},{"location":"#core-concepts","title":"\ud83d\udcda Core Concepts","text":"<ul> <li>Authentication &amp; Security - Certificate setup and security best practices</li> <li>Order Lifecycle - Understanding order statuses and transitions</li> <li>Payment Flow - End-to-end payment process</li> </ul>"},{"location":"#api-reference","title":"\ud83d\udcd6 API Reference","text":"<ul> <li>Client Setup - Client initialization and dependency injection</li> <li>Order Operations - Creating and retrieving orders</li> <li>Models &amp; Types - Request/response models and enums</li> </ul>"},{"location":"#supported-operations","title":"Supported Operations","text":"Operation Status Description Create Order \u2705 Available Create new payment orders Get Order \u2705 Available Retrieve order details with expansions Refunds \ud83d\udd04 Coming Soon Process refunds and reversals Webhooks \ud83d\udd04 Coming Soon Handle payment notifications"},{"location":"#links-resources","title":"Links &amp; Resources","text":"<ul> <li>Github Repository - Source code and issues</li> <li>CibPay Website - Official CibPay information</li> <li>.NET Documentation - Microsoft .NET docs</li> </ul>"},{"location":"#support-contributing","title":"Support &amp; Contributing","text":"<p>\ud83d\udc96 Premium Sponsor and Support: @Cibpay</p> <p>For issues, contributions, or feedback: - \ud83d\udc1b Report Issues - \ud83d\udca1 Feature Requests - \ud83d\udce7 Contact Developer</p> <p>Maintainer: Ali Aliyev - LinkedIn </p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to the CibPay .NET SDK will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#v100-preview2-september-1-2025","title":"[v1.0.0-preview.2] - September 1, 2025","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Package Resolution: Fixed <code>NU1101: Unable to find package CibPay.Http</code> error that prevented package installation</li> <li>Packaging: <code>CibPay.Http</code> solution is now properly compiled and packed with <code>CibPay.Sdk</code> as a single unified package</li> <li>Installation: Package can now be installed successfully using <code>dotnet add package CibPay.Sdk</code></li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Architecture: Consolidated <code>CibPay.Http</code> into the main <code>CibPay.Sdk</code> package to eliminate dependency resolution issues</li> <li>Distribution: Simplified package distribution to single NuGet package for easier consumption</li> </ul>"},{"location":"changelog/#v100-preview1-september-1-2025","title":"[v1.0.0-preview.1] - September 1, 2025","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Initial Release: First preview release of the CibPay .NET SDK</li> <li>Core Features: </li> <li>\ud83d\udd12 Secure Authentication: Certificate-based authentication with basic auth support for CibPay API integration</li> <li>\ud83d\udcb3 Order Management: Complete order lifecycle management with create and retrieve operations</li> <li>\ud83c\udfd7\ufe0f Easy Integration: Simple client setup with factory pattern and dependency injection support</li> <li>\u26a1 Async/Await Support: Modern async programming patterns throughout the SDK</li> <li>\ud83d\udee1\ufe0f Type Safety: Strongly-typed models and comprehensive error handling</li> <li> <p>\ud83d\udcf1 Multi-Platform: Compatible with console apps, ASP.NET Core, and other .NET platforms</p> </li> <li> <p>Payment Operations:</p> </li> <li>Create payment orders with comprehensive request options</li> <li>Retrieve order details with expansion support for card information</li> <li>Support for custom fields, client information, and merchant order IDs</li> <li> <p>Configurable payment options including auto-charge, 3D Secure, and recurring payments</p> </li> <li> <p>Configuration:</p> </li> <li>Flexible SDK configuration through <code>SdkOptions</code></li> <li>Support for multiple environments (production, preprod)</li> <li>Certificate-based security with P12 certificate support</li> <li> <p>Configurable return URLs and timeout settings</p> </li> <li> <p>Models &amp; Types:</p> </li> <li><code>CreateOrderRequest</code> with comprehensive payment details</li> <li><code>OrderResponse</code> with detailed order information</li> <li>Order status tracking and conversion utilities</li> <li> <p>Order expansion types for detailed data retrieval</p> </li> <li> <p>Error Handling:</p> </li> <li>Custom <code>ApiException</code> for API-specific errors</li> <li>Comprehensive error response models</li> <li> <p>Validation for required configuration parameters</p> </li> <li> <p>Developer Experience:</p> </li> <li>Simple factory pattern for client creation (<code>CibPayClientFactory.Create()</code>)</li> <li>Intuitive fluent API design</li> <li>Comprehensive XML documentation</li> <li>Sample applications for console and ASP.NET Core</li> </ul>"},{"location":"changelog/#technical-details","title":"Technical Details","text":"<ul> <li>Target Framework: .NET 6.0+</li> <li>Dependencies: Minimal external dependencies for optimal performance</li> <li>Architecture: Clean separation of concerns with Core, Http, and SDK layers</li> <li>Authentication: X.509 certificate authentication with HTTP basic auth</li> <li>Serialization: System.Text.Json for optimal performance and compatibility</li> </ul>"},{"location":"changelog/#note","title":"Note","text":"<p>\u26a0\ufe0f PREVIEW VERSION This SDK is currently in preview. Features and APIs may change in future releases. Use in production environments at your own discretion.</p>"},{"location":"api-reference/client-setup/","title":"Client Setup","text":"<p>Initialize and configure the CibPay client.</p>"},{"location":"api-reference/client-setup/#basic-client-creation","title":"Basic Client Creation","text":"<pre><code>using CibPay.Http.Configuration;\nusing CibPay.Sdk;\n\nvar options = new SdkOptions\n{\n    Username = \"your-username\",\n    Password = \"your-password\",\n    BaseUrl = \"https://api-preprod.cibpay.co\",\n    CertificatePath = \"Certificate/api-cibpay.p12\",\n    CertificatePassword = \"your-cert-password\"\n};\n\nvar client = CibPayClientFactory.Create(options);\n</code></pre>"},{"location":"api-reference/client-setup/#thread-safety","title":"Thread Safety","text":"<p>The client is thread-safe and should be used as a singleton:</p> <pre><code>// \u2705 Correct - Single instance for entire application\nprivate static readonly CibPayClient _client = CibPayClientFactory.Create(options);\n\n// \u2705 Safe for concurrent use\nawait _client.Orders.CreateAsync(request);\n</code></pre>"},{"location":"api-reference/client-setup/#aspnet-core-integration","title":"ASP.NET Core Integration","text":"<pre><code>// Program.cs\nbuilder.Services.AddSingleton&lt;CibPayClient&gt;(provider =&gt;\n{\n    var config = provider.GetRequiredService&lt;IConfiguration&gt;();\n    var options = new SdkOptions\n    {\n        Username = config[\"CibPay:Username\"]!,\n        Password = config[\"CibPay:Password\"]!,\n        BaseUrl = config[\"CibPay:BaseUrl\"]!,\n        CertificatePath = config[\"CibPay:CertificatePath\"]!,\n        CertificatePassword = config[\"CibPay:CertificatePassword\"]!\n    };\n    return CibPayClientFactory.Create(options);\n});\n</code></pre>"},{"location":"api-reference/client-setup/#controller-usage","title":"Controller Usage","text":"<pre><code>[ApiController]\npublic class PaymentsController : ControllerBase\n{\n    private readonly CibPayClient _client;\n\n    public PaymentsController(CibPayClient client)\n    {\n        _client = client;\n    }\n\n    [HttpPost(\"orders\")]\n    public async Task&lt;IActionResult&gt; CreateOrder([FromBody] CreateOrderRequest request)\n    {\n        var response = await _client.Orders.CreateAsync(request);\n        return Ok(response);\n    }\n}\n</code></pre>"},{"location":"api-reference/client-setup/#error-handling","title":"Error Handling","text":"<pre><code>try\n{\n    var client = CibPayClientFactory.Create(options);\n}\ncatch (ArgumentException ex)\n{\n    // Configuration validation failed\n}\ncatch (FileNotFoundException ex)\n{\n    // Certificate file not found\n}\n</code></pre>"},{"location":"api-reference/orders/create-order/","title":"Create Order","text":"<p>Create a new payment order.</p>"},{"location":"api-reference/orders/create-order/#method","title":"Method","text":"<pre><code>Task&lt;OrderProviderResponse&gt; CreateAsync(CreateOrderRequest request)\n</code></pre>"},{"location":"api-reference/orders/create-order/#basic-usage","title":"Basic Usage","text":"<pre><code>var request = new CreateOrderRequest\n{\n    Amount = 50.00m,\n    Currency = \"AZN\"\n};\n\nvar response = await client.Orders.CreateAsync(request);\nConsole.WriteLine($\"Order ID: {response.Data.Id}\");\n</code></pre>"},{"location":"api-reference/orders/create-order/#with-options","title":"With Options","text":"<pre><code>var request = new CreateOrderRequest\n{\n    Amount = 199.99m,\n    Currency = \"AZN\",\n    MerchantOrderId = \"ORD-12345\",\n\n    Options = new Options\n    {\n        ReturnUrl = \"https://mystore.com/payment/return\",\n        Language = \"en\",\n        AutoCharge = true,\n        Force3d = 1,\n        ExpirationTimeout = \"30m\",\n        Terminal = \"web\",\n        Country = \"AZ\"\n    },\n\n    Client = new RequestedClient\n    {\n        Email = \"customer@example.com\",\n        Phone = \"+994501234567\"\n    },\n\n    ExtraFields = new ExtraFields\n    {\n        InvoiceId = \"INV-2025-001\",\n        OneClick = new OneClick\n        {\n            CustomerId = \"CUST-12345\",\n            Prechecked = 1\n        }\n    },\n\n    CustomFields = new CustomFields\n    {\n        RegionCode = \"AZ-BA\" // Baku region\n    }\n};\n\nvar response = await client.Orders.CreateAsync(request);\n</code></pre>"},{"location":"api-reference/orders/create-order/#parameters","title":"Parameters","text":"Property Type Required Description <code>Amount</code> <code>decimal?</code> \u2705 Payment amount <code>Currency</code> <code>string?</code> \u274c Currency code <code>MerchantOrderId</code> <code>string?</code> \u274c Your order reference <code>Options</code> <code>Options?</code> \u274c Payment options"},{"location":"api-reference/orders/get-order/","title":"Get Order","text":"<p>Retrieve order information and status.</p>"},{"location":"api-reference/orders/get-order/#method","title":"Method","text":"<pre><code>Task&lt;OrderProviderResponse&gt; GetAsync(string orderId, OrderExpansions orderExpansion = OrderExpansions.Card)\n</code></pre>"},{"location":"api-reference/orders/get-order/#basic-usage","title":"Basic Usage","text":"<pre><code>var response = await client.Orders.GetAsync(\"94856904049551304\");\n\nif (response.Success)\n{\n    var order = response.Data;\n    Console.WriteLine($\"Status: {order.Status}\");\n    Console.WriteLine($\"Amount: {order.Amount} {order.Currency}\");\n}\n</code></pre>"},{"location":"api-reference/orders/get-order/#order-expansions","title":"Order Expansions","text":"<p>Available expansion options:</p> <ul> <li><code>Card</code> - Card information (default)</li> <li><code>Client</code> - Customer information  </li> <li><code>Issuer</code> - Bank/issuer details</li> <li><code>Location</code> - Geographic data</li> </ul> <pre><code>var response = await client.Orders.GetAsync(orderId, OrderExpansions.Issuer);\n</code></pre>"},{"location":"api-reference/orders/get-order/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>orderId</code> <code>string</code> \u2705 Order identifier <code>orderExpansion</code> <code>OrderExpansions</code> \u274c Additional data to include"},{"location":"core-concepts/authentication/","title":"Authentication &amp; Security","text":"<p>CibPay SDK uses certificate-based authentication combined with basic HTTP authentication.</p>"},{"location":"core-concepts/authentication/#certificate-setup","title":"Certificate Setup","text":"<ol> <li>Get Certificate: Contact CibPay to receive your <code>.p12</code> certificate file and password</li> <li>Place in Project: Add certificate to <code>Certificate/</code> folder</li> <li>Configure Project: Set certificate to copy to output directory</li> </ol> <pre><code>&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n  &lt;ItemGroup&gt;\n    &lt;None Update=\"Certificate\\api-cibpay.p12\"&gt;\n      &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;\n    &lt;/None&gt;\n  &lt;/ItemGroup&gt;\n&lt;/Project&gt;\n</code></pre>"},{"location":"core-concepts/authentication/#authentication-configuration","title":"Authentication Configuration","text":"<pre><code>var options = new SdkOptions\n{\n    Username = \"your-username\",\n    Password = \"your-password\",\n    CertificatePath = \"Certificate/api-cibpay.p12\",\n    CertificatePassword = \"your-certificate-password\",\n    BaseUrl = \"https://api-preprod.cibpay.co\"\n};\n\nvar client = CibPayClientFactory.Create(options);\n</code></pre>"},{"location":"core-concepts/authentication/#security-best-practices","title":"Security Best Practices","text":"<ul> <li>Never hardcode credentials in source code</li> <li>Use environment variables for sensitive data</li> <li>Store certificates securely in production</li> <li>Monitor certificate expiration dates</li> <li>Use HTTPS URLs only</li> </ul>"},{"location":"core-concepts/authentication/#common-issues","title":"Common Issues","text":"Issue Solution Certificate file not found Check file path and <code>CopyToOutputDirectory</code> setting Authentication failed Verify username, password, and certificate password Certificate expired Contact CibPay for renewed certificate"},{"location":"core-concepts/order-lifecycle/","title":"Order Lifecycle","text":"<p>Orders go through different statuses during payment processing.</p>"},{"location":"core-concepts/order-lifecycle/#order-statuses","title":"Order Statuses","text":""},{"location":"core-concepts/order-lifecycle/#success-flow","title":"Success Flow","text":"<ul> <li>New - Order created, waiting for customer</li> <li>Prepared - Customer is authenticating with bank</li> <li>Authorized - Payment approved, funds held</li> <li>Charged - Payment completed, funds transferred</li> </ul>"},{"location":"core-concepts/order-lifecycle/#final-statuses","title":"Final Statuses","text":"<ul> <li>Reversed - Authorization cancelled</li> <li>Refunded - Money returned to customer</li> <li>Declined - Bank declined the payment</li> <li>Rejected - System rejected the order</li> <li>Fraud - Flagged as fraudulent</li> <li>Error - Technical error occurred</li> </ul>"},{"location":"core-concepts/order-lifecycle/#checking-order-status","title":"Checking Order Status","text":"<pre><code>var order = await client.Orders.GetAsync(orderId);\n\nswitch (order.Data.Status)\n{\n    case OrderStatuses.Charged:\n        // Payment successful - deliver goods\n        break;\n    case OrderStatuses.Declined:\n        // Payment failed - notify customer\n        break;\n    case OrderStatuses.Authorized:\n        // Payment approved - ready to charge\n        break;\n    // Handle other statuses...\n}\n</code></pre>"},{"location":"core-concepts/payment-flow/","title":"Payment Flow","text":"<p>Basic payment process with CibPay SDK.</p>"},{"location":"core-concepts/payment-flow/#payment-steps","title":"Payment Steps","text":""},{"location":"core-concepts/payment-flow/#1-create-order","title":"1. Create Order","text":"<pre><code>var request = new CreateOrderRequest\n{\n    Amount = 99.99m,\n    Currency = \"AZN\",\n    Options = new Options\n    {\n        ReturnUrl = \"https://yoursite.com/payment/return\",\n        AutoCharge = true\n    }\n};\n\nvar order = await client.Orders.CreateAsync(request);\n</code></pre>"},{"location":"core-concepts/payment-flow/#2-redirect-to-payment","title":"2. Redirect to Payment","text":"<pre><code>// Redirect customer to CibPay payment page\nvar paymentUrl = $\"{basePaymentUrl}{order.Data.Id}\";\nreturn Redirect(paymentUrl);\n</code></pre>"},{"location":"core-concepts/payment-flow/#3-handle-return","title":"3. Handle Return","text":"<pre><code>[HttpGet(\"payment/return\")]\npublic async Task&lt;IActionResult&gt; PaymentReturn(string orderId)\n{\n    var order = await client.Orders.GetAsync(orderId);\n\n    return order.Data.Status switch\n    {\n        OrderStatuses.Charged =&gt; RedirectToAction(\"Success\"),\n        OrderStatuses.Declined =&gt; RedirectToAction(\"Failed\"),\n        _ =&gt; RedirectToAction(\"Pending\")\n    };\n}\n</code></pre>"},{"location":"core-concepts/payment-flow/#payment-options","title":"Payment Options","text":""},{"location":"core-concepts/payment-flow/#3d-secure","title":"3D Secure","text":"<pre><code>var options = new Options\n{\n    Force3d = 1, // Force 3D Secure authentication\n    AutoCharge = true\n};\n</code></pre>"},{"location":"core-concepts/payment-flow/#manual-vs-auto-charge","title":"Manual vs Auto Charge","text":"<ul> <li>AutoCharge = true: Automatically charge after authorization</li> <li>AutoCharge = false: Manual charge required after authorization</li> </ul>"},{"location":"core-concepts/payment-flow/#return-url-best-practices","title":"Return URL Best Practices","text":"<ul> <li>Use HTTPS for security</li> <li>Include your order reference in URL parameters</li> <li>Handle both success and failure scenarios</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>Complete reference for configuring the CibPay .NET SDK.</p>"},{"location":"getting-started/configuration/#basic-configuration","title":"Basic Configuration","text":"<pre><code>using CibPay.Http.Configuration;\n\nvar options = new SdkOptions\n{\n    // Required\n    Username = \"your-username\",\n    Password = \"your-password\",\n    BaseUrl = \"https://api-preprod.cibpay.co\",\n    CertificatePath = \"Certificate/api-cibpay.p12\",\n    CertificatePassword = \"your-certificate-password\",\n\n    // Optional\n    ReturnUrl = \"https://yoursite.com/payment/return\",\n    AutoCharge = true,\n    Currency = \"AZN\"\n};\n</code></pre>"},{"location":"getting-started/configuration/#required-parameters","title":"Required Parameters","text":""},{"location":"getting-started/configuration/#authentication-parameters","title":"Authentication Parameters","text":"Parameter Type Description <code>Username</code> <code>string</code> Your CibPay merchant username <code>Password</code> <code>string</code> Your CibPay merchant password <code>CertificatePath</code> <code>string</code> Path to your .p12 certificate file <code>CertificatePassword</code> <code>string</code> Password for the certificate file"},{"location":"getting-started/configuration/#service-parameters","title":"Service Parameters","text":"Parameter Type Description <code>BaseUrl</code> <code>string</code> CibPay API base URL <p>Environment URLs: - Staging/Testing: <code>https://api-preprod.cibpay.co</code> - Production: Contact CibPay for production URL</p>"},{"location":"getting-started/configuration/#optional-parameters","title":"Optional Parameters","text":"Parameter Type Description <code>ReturnUrl</code> <code>string?</code> URL where users return after payment <code>AutoCharge</code> <code>bool?</code> Automatically charge after authorization <code>Force3D</code> <code>bool?</code> Force 3D Secure authentication <code>Currency</code> <code>string?</code> Default currency (\u201cAZN\u201d, \u201cUSD\u201d, \u201cEUR\u201d) <code>ExpirationTimeout</code> <code>string?</code> Order timeout (\u201c30m\u201d, \u201c1h\u201d, \u201c1d\u201d) <code>Language</code> <code>string?</code> Interface language (\u201cen\u201d, \u201caz\u201d, \u201cru\u201d)"},{"location":"getting-started/configuration/#aspnet-core-integration","title":"ASP.NET Core Integration","text":""},{"location":"getting-started/configuration/#appsettingsjson","title":"appsettings.json","text":"<pre><code>{\n  \"CibPay\": {\n    \"Username\": \"your-username\",\n    \"Password\": \"your-password\",\n    \"BaseUrl\": \"https://api-preprod.cibpay.co\",\n    \"CertificatePath\": \"Certificate/api-cibpay.p12\",\n    \"CertificatePassword\": \"your-cert-password\",\n    \"ReturnUrl\": \"https://yoursite.com/payment/return\"\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#service-registration","title":"Service Registration","text":"<pre><code>builder.Services.AddSingleton&lt;CibPayClient&gt;(provider =&gt;\n{\n    var config = provider.GetRequiredService&lt;IConfiguration&gt;();\n    var options = new SdkOptions\n    {\n        Username = config[\"CibPay:Username\"]!,\n        Password = config[\"CibPay:Password\"]!,\n        BaseUrl = config[\"CibPay:BaseUrl\"]!,\n        CertificatePath = config[\"CibPay:CertificatePath\"]!,\n        CertificatePassword = config[\"CibPay:CertificatePassword\"]!,\n        ReturnUrl = config[\"CibPay:ReturnUrl\"]\n    };\n    return CibPayClientFactory.Create(options);\n});\n</code></pre>"},{"location":"getting-started/configuration/#certificate-management","title":"Certificate Management","text":""},{"location":"getting-started/configuration/#project-setup","title":"Project Setup","text":"<pre><code>&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n  &lt;ItemGroup&gt;\n    &lt;None Update=\"Certificate\\*.p12\"&gt;\n      &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;\n    &lt;/None&gt;\n  &lt;/ItemGroup&gt;\n&lt;/Project&gt;\n</code></pre>"},{"location":"getting-started/configuration/#security-best-practices","title":"Security Best Practices","text":"<ul> <li>Never commit certificates to version control</li> <li>Use environment variables for sensitive data</li> <li>Store certificates securely in production</li> <li>Monitor certificate expiration dates</li> </ul>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>For production, use environment variables:</p> <pre><code>var options = new SdkOptions\n{\n    Username = Environment.GetEnvironmentVariable(\"CIBPAY_USERNAME\")!,\n    Password = Environment.GetEnvironmentVariable(\"CIBPAY_PASSWORD\")!,\n    BaseUrl = Environment.GetEnvironmentVariable(\"CIBPAY_BASE_URL\")!,\n    CertificatePath = Environment.GetEnvironmentVariable(\"CIBPAY_CERT_PATH\")!,\n    CertificatePassword = Environment.GetEnvironmentVariable(\"CIBPAY_CERT_PASSWORD\")!\n};\n</code></pre>"},{"location":"getting-started/configuration/#common-errors","title":"Common Errors","text":"Error Solution <code>Username cannot be null or empty</code> Set <code>Username</code> property <code>Certificate file not found</code> Check file path and existence <code>BaseUrl must be a valid absolute URI</code> Use complete URL with protocol"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#nuget-package-manager","title":"NuGet Package Manager","text":"<pre><code>dotnet add package CibPay.Sdk\n</code></pre>"},{"location":"getting-started/installation/#package-manager-console","title":"Package Manager Console","text":"<pre><code>Install-Package CibPay.Sdk\n</code></pre>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>.NET 8.0 or later</li> <li>Valid CibPay merchant credentials</li> <li>SSL certificate for authentication</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will walk you through creating your first payment order using the CibPay .NET SDK in just a few minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>\u2705 .NET 8.0 or later installed</li> <li>\u2705 CibPay merchant credentials (username and password)</li> <li>\u2705 SSL certificate file (.p12) provided by CibPay</li> <li>\u2705 Certificate password from CibPay</li> </ul> <p>Getting the credentials</p> <p>You should contact with CibPay in order to have these credentials</p>"},{"location":"getting-started/quick-start/#step-1-install-the-sdk","title":"Step 1: Install the SDK","text":"<p>Install the CibPay SDK via NuGet Package Manager:</p> <pre><code>dotnet add package CibPay.Sdk\n</code></pre> <p>Or using Package Manager Console in Visual Studio:</p> <pre><code>Install-Package CibPay.Sdk\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-set-up-your-certificate","title":"Step 2: Set Up Your Certificate","text":"<ol> <li> <p>Place your certificate file in your project (e.g., <code>Certificate/api-cibpay.p12</code>)</p> </li> <li> <p>Configure the certificate in your project file to be copied to output directory:</p> </li> </ol> <pre><code>&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n  &lt;!-- Other project settings --&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;None Update=\"Certificate\\api-cibpay.p12\"&gt;\n      &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;\n    &lt;/None&gt;\n  &lt;/ItemGroup&gt;\n&lt;/Project&gt;\n</code></pre> <p>Security Note</p> <p>Never commit certificate files to version control. Use environment-specific configurations for production deployments.</p>"},{"location":"getting-started/quick-start/#step-3-console-application-example","title":"Step 3: Console Application Example","text":"<p>Create a simple console application to test the SDK:</p> <pre><code>using CibPay.Http.Configuration;\nusing CibPay.Sdk;\nusing CibPaySdk.Core.Models;\nusing CibPaySdk.Core.Types;\n\n// Configure the SDK with your credentials\nvar options = new SdkOptions\n{\n    Username = \"your-username\",\n    Password = \"your-password\",\n    BaseUrl = \"https://api-preprod.cibpay.co\", // Use preprod for testing\n    CertificatePath = \"Certificate/api-cibpay.p12\",\n    CertificatePassword = \"your-certificate-password\",\n    ReturnUrl = \"https://yoursite.com/payment/return\"\n};\n\ntry\n{\n    // Create the client\n    var client = CibPayClientFactory.Create(options);\n\n    // Create a new order\n    var createRequest = new CreateOrderRequest\n    {\n        Amount = 10.50m, // 10.50 AZN\n        Currency = \"AZN\"\n    };\n\n    var orderResponse = await client.Orders.CreateAsync(createRequest);\n\n    Console.WriteLine(\"\u2705 Order created successfully!\");\n    Console.WriteLine($\"Order ID: {orderResponse.Data.Id}\");\n    Console.WriteLine($\"Status: {orderResponse.Data.Status}\");\n    Console.WriteLine($\"Amount: {orderResponse.Data.Amount} {orderResponse.Data.Currency}\");\n\n    // Retrieve the order details\n    var retrievedOrder = await client.Orders.GetAsync(\n        orderResponse.Data.Id, \n        OrderExpansions.Card\n    );\n\n    Console.WriteLine(\"\\n\ud83d\udccb Order Details:\");\n    Console.WriteLine($\"Created: {retrievedOrder.Data.Created}\");\n    Console.WriteLine($\"Updated: {retrievedOrder.Data.Updated}\");\n    Console.WriteLine($\"Status: {retrievedOrder.Data.Status}\");\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"\u274c Error: {ex.Message}\");\n}\n</code></pre>"},{"location":"getting-started/quick-start/#step-4-aspnet-core-web-api-example","title":"Step 4: ASP.NET Core Web API Example","text":"<p>For web applications, configure the SDK with dependency injection:</p>"},{"location":"getting-started/quick-start/#configure-services-programcs","title":"Configure Services (Program.cs)","text":"<pre><code>using CibPay.Http.Configuration;\nusing CibPay.Sdk;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add SDK as singleton (thread-safe)\nbuilder.Services.AddSingleton&lt;CibPayClient&gt;(serviceProvider =&gt;\n{\n    var configuration = serviceProvider.GetRequiredService&lt;IConfiguration&gt;();\n\n    var options = new SdkOptions\n    {\n        Username = configuration[\"CibPay:Username\"]!,\n        Password = configuration[\"CibPay:Password\"]!,\n        BaseUrl = configuration[\"CibPay:BaseUrl\"]!,\n        CertificatePath = configuration[\"CibPay:CertificatePath\"]!,\n        CertificatePassword = configuration[\"CibPay:CertificatePassword\"]!,\n        ReturnUrl = configuration[\"CibPay:ReturnUrl\"]\n    };\n\n    return CibPayClientFactory.Create(options);\n});\n\nvar app = builder.Build();\n\n// Configure endpoints\napp.MapGet(\"/\", () =&gt; \"CibPay SDK Web API\");\n\napp.MapPost(\"/orders\", async (CibPayClient client, CreateOrderRequest request) =&gt;\n{\n    try\n    {\n        var response = await client.Orders.CreateAsync(request);\n        return Results.Ok(response);\n    }\n    catch (Exception ex)\n    {\n        return Results.BadRequest(new { error = ex.Message });\n    }\n});\n\napp.MapGet(\"/orders/{orderId}\", async (CibPayClient client, string orderId) =&gt;\n{\n    try\n    {\n        var response = await client.Orders.GetAsync(orderId, OrderExpansions.Card);\n        return Results.Ok(response);\n    }\n    catch (Exception ex)\n    {\n        return Results.NotFound(new { error = ex.Message });\n    }\n});\n\napp.Run();\n</code></pre>"},{"location":"getting-started/quick-start/#configuration-appsettingsjson","title":"Configuration (appsettings.json)","text":"<pre><code>{\n  \"CibPay\": {\n    \"Username\": \"your-username\",\n    \"Password\": \"your-password\",\n    \"BaseUrl\": \"https://api-preprod.cibpay.co\",\n    \"CertificatePath\": \"Certificate/api-cibpay.p12\",\n    \"CertificatePassword\": \"your-certificate-password\",\n    \"ReturnUrl\": \"https://yoursite.com/payment/return\"\n  }\n}\n</code></pre>"},{"location":"getting-started/quick-start/#success-indicators","title":"Success Indicators","text":"<p>You\u2019ve successfully integrated CibPay SDK when you see:</p> <p>\u2705 Order Creation: Orders are created with status \u201cNew\u201d \u2705 No Authentication Errors: Certificate and credentials are working \u2705 Proper Response Format: Structured JSON responses with order data \u2705 Order Retrieval: Can fetch order details by ID  </p>"},{"location":"getting-started/quick-start/#common-first-time-issues","title":"Common First-Time Issues","text":"Issue Solution Certificate not found Check file path and ensure <code>CopyToOutputDirectory</code> is set Authentication failed Verify username, password, and certificate password Network errors Confirm BaseUrl and internet connectivity SSL errors Ensure certificate is valid and not expired"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you have a working integration:</p> <ol> <li>Learn about Configuration - Understand all configuration options</li> <li>Explore Core Concepts - Deep dive into authentication and order lifecycle</li> <li>API Reference - Complete API documentation</li> <li>Production Setup - Configure for production environment</li> </ol>"},{"location":"getting-started/quick-start/#full-working-examples","title":"Full Working Examples","text":"<p>The SDK includes complete working examples in the repository:</p> <ul> <li>Console Application: <code>samples/CibPay.Sample/</code></li> <li>Web API: <code>samples/CibPay.Sample.Api/</code></li> </ul> <p>Clone the repository to explore these examples:</p> <pre><code>git clone https://github.com/alistein/cibpay-sdk-dotnet.git\ncd cibpay-sdk-dotnet/samples\n</code></pre> <p>Pro Tip</p> <p>Start with the console sample to understand the basic flow, then move to the web API sample for production-ready patterns.</p>"}]}